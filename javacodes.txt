-JAVA-
Implement a Java program to calculate gross salary & net salary taking 
the following data. Input: empno, empname, basic Process:
DA-70% of basic, HRA-30% of basic, CCA-Rs240/-, PF-10% of basic, PT-Rs100/
Code:
import java.util.*;
public class exp1
{
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
 String emp_name;
 int emp_no;
int emp_salary;
 System.out.println("Enter the employee name: ");
 emp_name = sc.nextLine();
System.out.println("Enter the employee no: ");
 emp_no = sc.nextInt();
System.out.println("Enter the employee basic: ");
 emp_salary = sc.nextInt();
int DA = emp_salary * (70/100);
int HRA = emp_salary * (30/100);
int CCA = 240;
int PF = emp_salary * (10/100);
int PT = 100;
int Gross_salary = DA+HRA+CCA+PF+PT;
int net_salary = Gross_salary - (PF+PT);
System.out.println("The name of an employee is "+emp_name);
System.out.println("The no of an employee is "+emp_no);
System.out.println("The total Salary of an employee is "+Gross_salary);
System.out.println("The net Salary of an employee is "+net_salary);
}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Problem Statement:-
Write a menu driven Java program which will read a number and should 
implement the following methods
1. factorial () 2. testArmstrong) 3. testPalindrome() 4. testPrime()
5. fibonacciSeries()
Code:
import java.util.Scanner;
import java.lang.Math;
class exp2{
 int num;
 void factorial(int n)
{
int i=1,p=1;
for(i=1;i<=n;i++)
{
p=p*i;
}
System.out.println("Value of the factorial of " + n + " is " + p);
}
 void testArmstrong(int n){
 int count = 0, digit = 0, arm = 0;
 int temp = n;
 while(temp!=0){
 count++;temp /= 10;
 }
 temp = n;
 while(temp!=0) {
 digit = temp%10;
 arm += Math.pow(digit, count);
 temp /= 10;
 }
 if(arm == n)
 System.out.println("The number " + n + " is an armstrong number.");
 else
 System.out.println("The number " + n + " is not an armstrong number. 
");
 }

 void testPalindrome(int n) {
 int digit = 0, revers = 0, temp = n;
 while(temp != 0){
 digit = temp%10;
 revers = revers * 10 + digit;
 temp = temp/10;
 }
 if(revers == n)
 System.out.println("The number " + n + " is palindrome.");
 else
 System.out.println("The number " + n + " is not palindrome.");
 }
 void testPrime(int n) {
 if(n <= 1) {
 System.out.println("The number " +n+ " is not a prime number. ");
 return;
 }
 for(int i = 2; i < Math.sqrt(n); i++)
 {
 if(n % i == 0) {
 System.out.println("The number " +n+ " is not a prime number. ");
 return;
 }
 }
 System.out.println("The number " + n + " is a prime number. ");}
 void fibonacciSeries(int n)
{
int i,a,b,c;
a=0;
b=1;
for(i=1;i<n-2;i++)
{
c=a;
a=b;
b=c+a;
}
 System.out.println("Value of the fibonacii series of " + n + " is " + b);
}
 
 public static void main(String args[]) {
 Scanner sc = new Scanner(System.in);
 exp2 e1 = new exp2();
 System.out.println("Enter any positive number : ");
 int n = sc.nextInt();
 while(true)
 {
 System.out.println("Select which operation to perform : ");
 System.out.println("\n1. Factorial\n2. Armstrong\n3. Palindrome\n4. 
Prime\n5. Fibonacci \n6. Exit");
 int ch = sc.nextInt();
 switch(ch) {
 case 1:
 e1.factorial(n);
 break;
 case 2:
 e1.testArmstrong(n);
 break;
 case 3:
 e1.testPalindrome(n);
 break;
 case 4:
 e1.testPrime(n);
 break;
 case 5:
 e1.fibonacciSeries(n);
 break;
 case 6 :
 System.exit(0);
 default:
 System.out.println("Invalid choice. ");
 }
 }
 }
}
//////////////////////////////////////////////////////////////////////////////////
Problem Statement:-
Write a program to print the area of a rectangle by creating a class named 
'Area' having two methods. First method named as 'setDim' takes length 
and breadth of rectangle as parameters and the second method named 
as 'getArea' returns the area of the rectangle. Length and breadth of 
rectangle are entered through keyboard.
Code:
import java.util.Scanner;
class setDim
{
float length;
float width;
void getDimensions()
{
Scanner in = new Scanner(System.in);
System.out.println("Enter Length, Width of Rectangle:\t");
length=in.nextFloat();
width=in.nextFloat();
}}
class getArea extends setDim
{
void displayVolumeArea()
{
System.out.println("Area of Rectangle : "+(length*width));
}}
public class exp3 extends getArea
{
public static void main(String[] args)
{
/*setDim a=new setDim();*/
getArea b=new getArea();
b.getDimensions();
b.displayVolumeArea();
}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
Write a Program to demonstrate the usage of Constructor in Java :
      a) Default Constructor 
    b)	Parameterized Constructor 
Code:  
class Person {
    String name;
    int age;

    // Default constructor
    Person() {
        name = "John Doe";
        age = 30;
    }

    // Parameterized constructor
    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    void display() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
    }
}

public class ConstructorExample {
    public static void main(String[] args) {
        // Creating objects using default and parameterized constructors
        Person person1 = new Person(); // Default constructor
        Person person2 = new Person("Alice", 25); // Parameterized constructor

        // Displaying information for both objects
        System.out.println("Person 1 (Default Constructor):");
        person1.display();

        System.out.println("\nPerson 2 (Parameterized Constructor):");
        person2.display();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Create a class Book and define a display method to display book 
Inherit Reference_Book and Magazine classes from Book display method of Book class 
in Reference_Book and Make necessary assumptions required.information. class and 
override Magazine classes.
Code:
class Book {
protected String title, author;
public Book(String title, String 
author) {
this.title = title;
this.author = author;
}
public void display() {
System.out.println("Title: " + title 
+ "\nAuthor: " + author);
}
}
class Reference_Book extends 
Book {
private String category;
public Reference_Book(String 
title, String author, String 
category) {
super(title, author);
this.category = category;
}
@Override
public void display() {
super.display();
System.out.println("Category: " 
+ category);
}
}
class Magazine extends Book {
private String issue;
public Magazine(String title, 
String author, String issue) {
super(title, author);
this.issue = issue;
}
@Override
public void display() {
super.display();
System.out.println("Issue: " + 
issue);
}
}
public class Experiment_6 {
public static void main(String[] 
args) {
new Reference_Book("Ref Book 
Title", "Ref Book Author", 
"Science").display();
System.out.println();
new Magazine("Magazine Title", 
"Magazine Author", "May 
2023").display();
}
}
//////////////////////////////////////////////////////////////////////////////////////////
Create an interface vehicle and classes like bicycle, car, bike etc, 
having common functionalities and put all the common functionalities in the interface. 
Classes like Bicycle, Bike, car etc implement all these functionalities in their own class in 
their own way.
Code:
// Interface defining common 
functionalities for vehicles
interface Vehicle {
void start();
void accelerate();
void brake();
void honk();
}
// Class implementing Vehicle 
interface for Bicycle
class Bicycle implements Vehicle 
{
@Override
public void start() {
System.out.println("Bicycle 
started pedaling.");
}
@Override
public void accelerate() {
System.out.println("Bicycle is 
speeding up.");
}
@Override
public void brake() {
System.out.println("Bicycle 
applied brakes.");
}
@Override
public void honk() {
System.out.println("Bicycle 
doesn't have a horn.");
}
}
// Class implementing Vehicle 
interface for Bike
class Bike implements Vehicle {
@Override
public void start() {
System.out.println("Bike 
started.");
}
@Override
public void accelerate() {
System.out.println("Bike is 
accelerating.");
}
@Override
public void brake() {
System.out.println("Bike applied 
brakes.");
}
@Override
public void honk() {
System.out.println("Bike 
honked.");
}
}
// Class implementing Vehicle 
interface for Car
class Car implements Vehicle {
@Override
public void start() {
System.out.println("Car 
started.");
}
@Override
public void accelerate() {
System.out.println("Car is 
speeding up.");
}
@Override
public void brake() {
System.out.println("Car applied 
brakes.");
}
@Override
public void honk() {
System.out.println("Car 
honked.");
}
}
// Main class for testing
public class Experiment_7 {
public static void main(String[] 
args) {
Vehicle bicycle = new Bicycle();
Vehicle bike = new Bike();
Vehicle car = new Car();
// Test functionalities
bicycle.start();
bicycle.accelerate();
bicycle.brake();
bicycle.honk();
System.out.println();
bike.start();
bike.accelerate();
bike.brake();
bike.honk();
System.out.println();
car.start();
car.accelerate();
car.brake();
car.honk();
}
}
/////////////////////////////////////////////////////////////////
Problem Statement:
Write a Program to demonstrate thread.
public class MultithreadDemo3 {
    public static void main(String[] args) {
        hello obj = new hello();
        hi obj2 = new hi();
        obj.start();
        obj2.start();
        System.out.println(obj.isAlive());
        System.out.println(obj2.isAlive());
        try {
            obj.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        try {
            obj2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(obj.isAlive());
        System.out.println(obj2.isAlive());
        System.out.println("Bye Bye");
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////
VECTOR AND STRINGS
import java.util.Vector;

public class VectorAndString {
    public static void main(String[] args) {
        // Creating a Vector of Strings
        Vector<String> vector = new Vector<>();

        // Adding elements to the vector
        vector.add("Apple");
        vector.add("Banana");
        vector.add("Cherry");

        // Accessing and printing elements from the vector
        System.out.println("Fruits in the Vector:");
        for (String fruit : vector) {
            System.out.println(fruit);
        }

        // Creating and manipulating Strings
        String str1 = "Hello, ";
        String str2 = "World!";

        // Concatenating strings
        String result = str1 + str2;
        System.out.println("Concatenated String: " + result);

        // Length of the concatenated string
        int length = result.length();
        System.out.println("Length of the String: " + length);

        // Searching for substrings
        boolean contains = result.contains("World");
        System.out.println("Contains 'World': " + contains);

        // Substring
        String sub = result.substring(0, 5);
        System.out.println("Substring: " + sub);
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Problem Statement:
Write a Program to create a Student Profile form using Awt controls
Code:
import javax.swing.*;
import java.awt.event.*;

class StudentForm extends JFrame implements ActionListener {
    JLabel l1, l2, l3, l4, l5;
    JTextField tx1, tx2;
    JRadioButton rb1, rb2;
    JComboBox<String> cb; // Use generics here
    JCheckBox cb1, cb2, cb3;
    JButton b;
    JTextArea area;

    StudentForm() {
        JFrame f = new JFrame("STUDENT FORM");
        JLabel l1 = new JLabel("Name:");
        l1.setBounds(20, 20, 80, 30);
        tx1 = new JTextField();
        tx1.setBounds(100, 20, 150, 30);
        f.add(l1);
        f.add(tx1);

        JLabel l2 = new JLabel("Mobile No.");
        l2.setBounds(20, 70, 80, 30);
        tx2 = new JTextField();
        tx2.setBounds(100, 70, 150, 30);
        f.add(l2);
        f.add(tx2);

        JLabel l3 = new JLabel("Gender");
        l3.setBounds(20, 120, 80, 30);
        rb1 = new JRadioButton("Male");
        rb1.setBounds(100, 120, 60, 30);
        rb2 = new JRadioButton("Female");
        rb2.setBounds(180, 120, 100, 30);
        ButtonGroup bg = new ButtonGroup();
        bg.add(rb1);
        bg.add(rb2);
        f.add(rb1);
        f.add(rb2);
        f.add(l3);

        JLabel l4 = new JLabel("Age");
        l4.setBounds(20, 165, 80, 30);
        String age[] = {"18", "19", "20", "21", "22"};
        cb = new JComboBox<>(age); // Use generics here
        cb.setBounds(100, 170, 90, 20);
        f.add(l4);
        f.add(cb);

        JLabel l5 = new JLabel("Hobbies");
        l5.setBounds(20, 215, 50, 30);
        f.add(l5);

        cb1 = new JCheckBox("Reading");
        cb1.setBounds(80, 220, 80, 20);
        cb2 = new JCheckBox("singing");
        cb2.setBounds(160, 220, 80, 20);
        cb3 = new JCheckBox("dancing");
        cb3.setBounds(250, 220, 100, 20);
        f.add(cb1);
        f.add(cb2);
        f.add(cb3);

        JButton b = new JButton("Submit");
        b.setBounds(140, 280, 75, 20);
        f.add(b);

        area = new JTextArea();
        area.setBounds(30, 320, 320, 100);
        f.add(area);

        b.addActionListener(this);

        setDefaultCloseOperation(EXIT_ON_CLOSE);
        f.setSize(400, 500);
        f.setLayout(null);
        f.setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        String name = tx1.getText();
        String mobile = tx2.getText();
        String gender = rb1.isSelected() ? "Male" : rb2.isSelected() ? "Female" : "-";
        String age = cb.getItemAt(cb.getSelectedIndex()).toString();
        String hobby = "";
        if (cb1.isSelected()) {
            hobby = "Reading";
        }
        if (cb2.isSelected()) {
            hobby = hobby + " " + "singing";
        }
        if (cb3.isSelected()) {
            hobby = hobby + " " + "dancing";
        }
        area.setText("Name:" + name + "\n" + "Mobile Number:" + mobile + "\n" + "Gender:" +
                gender + "\n" + "AGE:" + age
                + "\n" + "Hobbies:" + hobby);
    }

    public static void main(String[] args) {
        new StudentForm();
    }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
CALCULATOR 
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CalculatorGUI {
    private JFrame frame;
    private JTextField textField;
    private JButton[] numberButtons;
    private JButton[] functionButtons;
    private JButton addButton, subButton, mulButton, divButton, equalButton, clearButton;
    private JPanel panel;

    private double num1, num2, result;
    private char operator;

    public CalculatorGUI() {
        frame = new JFrame("Calculator");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 500);
        frame.setLayout(null);

        textField = new JTextField();
        textField.setBounds(50, 25, 300, 50);
        textField.setEditable(false);

        numberButtons = new JButton[10];
        for (int i = 0; i < 10; i++) {
            numberButtons[i] = new JButton(String.valueOf(i));
            numberButtons[i].addActionListener(new NumberButtonListener());
        }

        functionButtons = new JButton[6];
        addButton = new JButton("+");
        subButton = new JButton("-");
        mulButton = new JButton("*");
        divButton = new JButton("/");
        equalButton = new JButton("=");
        clearButton = new JButton("C");

        functionButtons[0] = addButton;
        functionButtons[1] = subButton;
        functionButtons[2] = mulButton;
        functionButtons[3] = divButton;
        functionButtons[4] = equalButton;
        functionButtons[5] = clearButton;

        for (int i = 0; i < 6; i++) {
            functionButtons[i].addActionListener(new FunctionButtonListener());
        }

        panel = new JPanel();
        panel.setBounds(50, 100, 300, 300);
        panel.setLayout(new GridLayout(5, 4, 10, 10));

        panel.add(clearButton);
        for (int i = 1; i < 10; i++) {
            panel.add(numberButtons[i]);
        }
        panel.add(numberButtons[0]);
        panel.add(addButton);
        panel.add(subButton);
        panel.add(mulButton);
        panel.add(divButton);
        panel.add(equalButton);

        frame.add(textField);
        frame.add(panel);
        frame.setVisible(true);
    }

    private class NumberButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String currentText = textField.getText();
            JButton button = (JButton) e.getSource();
            textField.setText(currentText + button.getText());
        }
    }

    private class FunctionButtonListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String currentText = textField.getText();
            JButton button = (JButton) e.getSource();

            if (button == clearButton) {
                textField.setText("");
                num1 = 0;
                num2 = 0;
                operator = '\0';
            } else if (button == equalButton) {
                num2 = Double.parseDouble(currentText);
                switch (operator) {
                    case '+':
                        result = num1 + num2;
                        break;
                    case '-':
                        result = num1 - num2;
                        break;
                    case '*':
                        result = num1 * num2;
                        break;
                    case '/':
                        if (num2 != 0) {
                            result = num1 / num2;
                        } else {
                            textField.setText("Error");
                            return;
                        }
                        break;
                }
                textField.setText(String.valueOf(result));
                num1 = result;
                operator = '\0';
            } else {
                if (operator == '\0') {
                    num1 = Double.parseDouble(currentText);
                    operator = button.getText().charAt(0);
                    textField.setText("");
                } else {
                    textField.setText("Error");
                }
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            new CalculatorGUI();
        });
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////
Write a Program to demonstrate Packages. Code:
package group;
public class calculatorr {
public int divide(int a,int b){
if(b!=0){
return a/b;
}
else{
throw new ArithmeticException("Cannot Divide by zero");
}
}
public int add(int a,int b){
return a + b;
}
public int sub(int a,int b){
return a - b;
}
public int mul(int a,int b){
return a * b;
}
}
}
}
import group.calculatorr;
public class execute {
public static void main(String[] args) {
calculatorr obj = new calculatorr();
int c=obj.divide(100,5);
int a=obj.add(100,5);
int s=obj.sub(100,5);
int m=obj.mul(100,5);
System.out.println(c);
System.out.println(a);
System.out.println(s);
System.out.println(m);
}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
exception handling
public class ExceptionHandling_1
{
public static void main(String[] args)
{
try
{
int data= 50/0;
System.out.println("rest of the code");
}
catch(ArithmeticException e)
{
System.out.println("I am catch block");
System.out.println(e);
}
}
}
2-
import java.util.Scanner;
public class ExceptionHandling_3
{
public static void validdate(int age)
{
if(age<18)
try
{
throw new ArithmeticException("Person is not eligible to vote.");
}
catch(ArithmeticException e)
{
System.out.println(e);
}
}
public static void main(String[] args){
System.out.println("Enter the value : ");
Scanner sc = new Scanner(System.in);
int n=sc.nextInt();
validdate(n);
System.out.println("Rest of the Code..");
}
}
3-
public class ExceptionHandling_2
{
public static void main(String[] args)
{
try
{
int a[]=new int[5];
a[10]=7;
int b=4/0;
}
catch(ArithmeticException e)
{
System.out.println("ArithmeticException e");
}
catch(ArrayIndexOutOfBoundsException e)
{
System.out.println("ArrayIndexOutOfBoundsException occurs");
}
System.out.println("rest of the code");
}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Problem Statement:- Write a Program to create a Menu using Swings. Code:
import javax.swing.*;
import java.awt.event.*;
public class exp14 implements
ActionListener{ JFrame f;
JMenuBar mb;
JMenu file,edit,help;
JMenuItem cut,copy,paste,selectAll;
JTextArea ta;
exp14(){
f=new JFrame();
cut=new JMenuItem("cut");
copy=new JMenuItem("copy");
paste=new JMenuItem("paste");
selectAll=new JMenuItem("selectAll");
cut.addActionListener(this);
copy.addActionListener(this);
paste.addActionListener(this);
selectAll.addActionListener(this);
mb=new JMenuBar();
mb.setBounds(5,5,400,40);
file=new JMenu("File");
edit=new JMenu("Edit");
help=new JMenu("Help");
edit.add(cut);edit.add(copy);edit.add(paste);edit.add(selectAll);
mb.add(file);mb.add(edit);mb.add(help);
ta=new JTextArea(); ta.setBounds(5,30,460,460);
f.add(mb);f.add(ta);
f.setLayout(null);

f.setSize(500,50 0);
f.setVisible(true);
}
public void actionPerformed(ActionEvent
e) {if(e.getSource()==cut)
ta.cut(); if(e.getSource()==paste)
ta.paste();
if(e.getSource()==copy)
ta.copy();
if(e.getSource()==selectAll
)ta.selectAll();
}
public static void main(String[]
args) {new exp14();
}
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Problem Statement:- Write a Java program to design a Login Form using JavaFX Controls. Code:
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
public class FirstjavaFX extends Application{
@Override
public void start(Stage primaryStage) throws Exception
{VBox vb = new VBox();
vb.setSpacing(10);
vb.setAlignment(Pos.CENTER);
Label l1 = new Label("Your Username");
TextField tx1= new TextField();
tx1.setMaxWidth(160);
Label l2 = new Label("Your Password");
PasswordField tx2 = new PasswordField();
tx2.setMaxWidth(160);
Button button = new Button("LOGIN");
TextField tx3= new TextField();
tx3.setMaxWidth(160);
vb.getChildren().addAll(l1,tx1,l2,tx2,button,tx3);
button.setOnAction(new EventHandler<ActionEvent>() {
@Override
public void handle(ActionEvent arg0) {
String userName = tx1.getText();
String password = tx2.getText();
if (userName.equals("TSEC") && password.equals("bandra"))
{tx3.setText(" Login successful");
Name: Aastha Ambavkar
Roll No: 134
Batch: S24
} else {
tx3.setText(" invalid user");
}
}
});
Scene scene=new Scene(vb,600,400);
primaryStage.setTitle("First JavaFX Application");
primaryStage.setScene(scene);
primaryStage.show();
}
public static void main (String[] args)
{
launch(args);
}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
i/o stream
import java.io.*;

public class IOExample {
    public static void main(String[] args) {
        // Reading from a file and writing to another file using buffered I/O
        try {
            // Reading from input.txt
            BufferedReader reader = new BufferedReader(new FileReader("input.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println("Read: " + line);

                // Writing to output.txt
                BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt", true)); // 'true' appends to the file
                writer.write("Written: " + line);
                writer.newLine();
                writer.close();
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Writing text to a file
        try {
            FileOutputStream fileOutputStream = new FileOutputStream("output.txt", true); // 'true' appends to the file
            OutputStreamWriter outputStreamWriter = new OutputStreamWriter(fileOutputStream);
            String text = "This is a new line of text.";
            outputStreamWriter.write(text);
            outputStreamWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
///////////////////////the end/////////////////////////////////////////////